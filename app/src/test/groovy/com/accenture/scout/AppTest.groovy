/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package com.accenture.scout

import groovy.time.TimeCategory
import groovy.time.TimeDuration
import spock.lang.Specification
import org.apache.commons.io.FileUtils

class AppTest extends Specification {

    def "application change content of files in directory"(){
        def N
        def M
        def baseDirPath = 'C:\\Users\\grobfdav\\TestFiles'
        def search = /Hello/
        def replace = /Hi/
        def logsPath = 'C:\\Users\\grobfdav\\'
        def expectations = []

        setup:

         def baseDir = new File(baseDirPath)
         FileUtils.cleanDirectory(baseDir)

         // number of files created
         N = 10
         //number of search text created
         M = 1000
         //create n files
         for (number in 1 .. N){
             def file = new File(baseDir.getAbsolutePath() + '/' + number + '.txt')
             for (text in 1 .. M) {
                 file.append(search)
             }
             expectations.add(file.absolutePath)
             expectations.add("${file.absolutePath}.bck")
         }
         when:
           App.main(baseDirPath, search, replace, logsPath)
         then:
           def List files = []
           baseDir.eachFileRecurse { item -> files << item.getAbsolutePath()}
           expectations.toSorted() == files.toSorted()

    }

    def "application parallel test"(){
        def N
        def M
        def baseDirPath = 'C:\\Users\\grobfdav\\TestFiles'
        def search = /Hello/
        def replace = /Hi/
        def logsPath = 'C:\\Users\\grobfdav\\'
        def expectations = []
        def app = new App()

        setup:
            app.baseDirPath = baseDirPath
            app.logsPath = logsPath
            app.replace = replace
            app.search = search
            def baseDir = new File(baseDirPath)
            FileUtils.cleanDirectory(baseDir)

            // number of files created
            N = 1000
            //number of search text created
            M = 10

            //create n files
            for (number in 1 .. N){
                def file = new File(baseDir.getAbsolutePath() + '/' + number + '.txt')
                for (text in 1 .. M) {
                    file.append(search)
                }

                expectations.add(file.absolutePath)
                expectations.add("${file.absolutePath}.bck")
            }
        when:
            def timeStart = new Date()
            app.replaceInFilesParallel()
            def timeStop = new Date()
            TimeDuration duration = TimeCategory.minus(timeStop, timeStart)
            println "parallel duration ${duration}"

        then:
            def List files = []
            baseDir.eachFileRecurse { item -> files << item.getAbsolutePath()}
            expectations.toSorted() == files.toSorted()

    }
    def "application simple test"(){
        def N
        def M
        def baseDirPath = 'C:\\Users\\grobfdav\\TestFiles'
        def search = /Hello/
        def replace = /Hi/
        def logsPath = 'C:\\Users\\grobfdav\\'
        def expectations = []
        def app = new App()

        setup:
        app.baseDirPath = baseDirPath
        app.logsPath = logsPath
        app.replace = replace
        app.search = search
        def baseDir = new File(baseDirPath)
        FileUtils.cleanDirectory(baseDir)

        // number of files created
        N = 1000
        //number of search text created
        M = 100
        //create n files
        for (number in 1 .. N){
            def file = new File(baseDir.getAbsolutePath() + '/' + number + '.txt')
            for (text in 1 .. M) {
                file.append(search)
            }
            expectations.add(file.absolutePath)
            expectations.add("${file.absolutePath}.bck")
        }
        when:
        def timeStart = new Date()
        app.replaceInFiles()
        def timeStop = new Date()
        TimeDuration duration = TimeCategory.minus(timeStop, timeStart)
        println "simple duration ${duration}"

        then:
        def List files = []
        baseDir.eachFileRecurse { item -> files << item.getAbsolutePath()}
        expectations.toSorted() == files.toSorted()

    }


}
